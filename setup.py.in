import gettext
import inspect
import os
import re
import setuptools
import subprocess
import sys


from distutils.command.clean import clean
from distutils.util import get_platform
from setuptools.command.build_py import build_py
from setuptools import setup
from wheel.bdist_wheel import bdist_wheel

PKG              = '@CPPYY_PKG@'
VERSION          = '@PROJECT_VERSION@'
(PKG_NAMESPACE,
 PKG_SIMPLENAME) = PKG.rsplit(".", 1) if '.' in PKG else "", PKG
PKG_DIR          = os.path.dirname(__file__)

CPPYY_LIB_SO     = '@CPPYY_LIB_SO@'
CPPYY_ROOTMAP    = '@CPPYY_ROOTMAP@'
CPPYY_PCM        = '@CPPYY_PCM@'
CPPYY_MAP        = '@CPPYY_MAP@'
EXTRA_PY         = '@EXTRA_PY@'

CPPYY_PKG_DATA = [CPPYY_LIB_SO, CPPYY_ROOTMAP, CPPYY_PCM, CPPYY_MAP]
CPPYY_PKG_DATA.extend([ep for ep in EXTRA_PY.split(';') if ep])

PKG_DESC = '''
Bindings for {name}.
These bindings are based on https://cppyy.readthedocs.io/en/latest/, and can be
used as per the documentation provided via the cppyy.cbl namespace. The environment
variable LD_LIBRARY_PATH must contain the path of the {}.rootmap file. Use
"import cppyy; from cppyy.gbl import <some-C++-entity>".

Alternatively, use "import {}". This convenience wrapper supports "discovery" of the
available C++ entities using, for example Python 3's command line completion support.
'''.format(name=PKG_SIMPLE_NAME)


class cppyy_build_py(build_py):

    def run(self):
        #
        # Base build.
        #
        build_py.run(self)
        #
        # Custom build.
        #
        #
        # Move CMake output to self.build_lib.
        #
        pkg_subdir = PKG.replace(".", os.path.sep)
        if PKG_NAMESPACE:
            #
            # Implement a pkgutil-style namespace package as per the guidance on
            # https://packaging.python.org/guides/packaging-namespace-packages.
            #
            namespace_init = os.path.join(PKG_NAMESPACE, "__init__.py")
            with open(namespace_init, "w") as f:
                f.write("__path__ = __import__('pkgutil').extend_path(__path__, __name__)\n")
            self.copy_file(namespace_init, os.path.join(self.build_lib, namespace_init))
        for f in self.package_data[PKG]:
            self.copy_file(os.path.join(PKG_DIR, pkg_subdir, f), os.path.join(self.build_lib, pkg_subdir, f))


class cppyy_clean(clean):

    def run(self):
        #
        # Custom clean.
        # TODO: There is no way to reliably clean the "dist" directory.
        #
        #
        #  Base clean.
        #
        clean.run(self)


class cppyy_bdist_wheel(bdist_wheel):

    def finalize_options(self):
        #
        # This is a universal (Python2/Python3), but platform-specific (has
        # compiled parts) package; a combination that wheel does not recognize,
        # thus simply fool it.
        #
        self.plat_name = get_platform()
        bdist_wheel.finalize_options(self)
        self.root_is_pure = True

CLASSIFIERS = [
    "Environment :: Console",
    "Environment :: MacOS X",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD License",
    "Natural Language :: English",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS :: MacOS X",
    "Programming Language :: C++",
    "Programming Language :: Python :: 3.5",
    "Programming Language :: Python :: 3.6",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
]

SETUP_METADATA = \
{
    "name": PKG,
    "version": VERSION,
    "description": DESC,
    "long_description": open("README.rst").read(),
    "author": "Camille Scott",
    "author_email": 'camille.scott.w@gmail.com',
    "packages": [PKG, PKG + '.tests'],
    "package_data": {PKG: CPPYY_PKG_DATA},
    "include_package_data": True,
    "zip_safe": False,
    "platforms": ['any'],
    "classifiers": CLASSIFIERS,
    "cmdclass": {
        'build_py':    cppyy_build_py,
        'clean':       cppyy_clean,
        'bdist_wheel': cppyy_bdist_wheel,
    },
}

setup(**SETUP_METADATA)
