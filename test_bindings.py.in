# pytest/nosetest sanity test script.
import logging
import os
import pydoc
import subprocess
import sys

from cppyy_backend import bindings_utils


SCRIPT_DIR = os.path.dirname(__file__)
pkg = '@PKG@'
PIPS = None


class Test(object):
    @classmethod
    def setup_class(klass):
        #
        # Make an attempt to check the verbosity setting (ignore quiet!).
        #
        verbose = [a for a in sys.argv[1:] if a.startswith(('-v', '--verbos'))]
        if verbose:
            logging.basicConfig(level=logging.DEBUG, format='%(asctime)s %(name)s %(levelname)s: %(message)s')
        else:
            logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
        global PIPS
        PIPS = bindings_utils.find_pips()

    @classmethod
    def teardown_class(klass):
        pass

    def setUp(self):
        '''This method is run once before _each_ test method is executed'''

    def teardown(self):
        '''This method is run once after _each_ test method is executed'''

    def test_install(self):
        for pip in PIPS:
            subprocess.check_call([pip, 'install', '--force-reinstall', '--pre', '.'], cwd=SCRIPT_DIR)

    def test_import(self):
        __import__(pkg)

    def test_help(self):
        pydoc.render_doc(pkg)

    def test_uninstall(self):
        for pip in PIPS:
            subprocess.check_call([pip, 'uninstall', '--yes', pkg], cwd=SCRIPT_DIR)

